name: Deploy to EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: PrimusAllCluster
  ECR_REPOSITORY_NAME: securepen
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY_NAME }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY_NAME }}
        
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:backend-${{ env.IMAGE_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:frontend-${{ env.IMAGE_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Update kube config
      run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      
    - name: Install envsubst
      run: |
        sudo apt-get update
        sudo apt-get install -y gettext-base
      
    - name: Deploy to EKS
      run: |
        # Set ECR repository URI in deployment files
        export ECR_REPOSITORY_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}
        export IMAGE_TAG=${{ env.IMAGE_TAG }}
        
        # Create processed directory
        mkdir -p processed-k8s
        
        # Process template files and apply to cluster
        for file in k8s/*.yaml; do
          echo "Processing $file..."
          envsubst < $file > processed-k8s/$(basename $file)
          kubectl apply -f processed-k8s/$(basename $file)
        done
        
        # Wait for deployments to be ready
        echo "Waiting for backend deployment..."
        kubectl rollout status deployment/securepen-backend --timeout=300s
        
        echo "Waiting for frontend deployment..."
        kubectl rollout status deployment/securepen-frontend --timeout=300s
        
        # Get the load balancer URL
        echo "Application deployed successfully!"
        echo "Load Balancer URL: $(kubectl get svc securepen-frontend-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
        
    - name: Verify Deployment
      run: |
        # Check if pods are running
        echo "Checking pod status..."
        kubectl get pods -l app=securepen
        
        # Check if services are available
        echo "Checking service status..."
        kubectl get svc -l app=securepen
        
        # Check if ingress is configured (if using ingress)
        if kubectl get ingress securepen-ingress &> /dev/null; then
          echo "Checking ingress status..."
          kubectl get ingress securepen-ingress
        fi
        
        echo "Deployment verification completed!"
